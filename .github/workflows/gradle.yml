# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Kotlin CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
  - cron: "0 12 * * 1-5"

jobs:
  build:
    runs-on: ubuntu-latest
#    runs-on: [ubuntu-latest, windows-latest, macos-latest]
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK for Gradle
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Configure and Setup GW
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      with:
        gradle-version: '8.10.2'


    # Cache Gradle dependencies
    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # Build and Test
    - name: Build KotZel
      run: ./gradlew build --scan
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}



    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build
    - name: Publish de Stuff
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}
      run: ./gradlew publish --scan

    # todo: grails setup
    - name: Metrics Collection
      run: grails -noreloading -javaagent:build-logic/newrelic/newrelic.jar run-app

    - name: New Relic infrastructure configuration
      run: curl -Ls https://download.newrelic.com/install/newrelic-cli/scripts/install.sh |  bash && sudo NEW_RELIC_API_KEY=${{ secrets.NEW_RELIC_API_KEY }} NEW_RELIC_ACCOUNT_ID=${{secrets.NEW_RELIC_ACCOUNT_ID}} /usr/local/bin/newrelic install -n logs-integration -y
  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      with:
        gradle-version: 8.10.2
        # Exclude all dependencies that originate solely in the 'buildSrc' project
        # dependency-graph-exclude-projets: ':buildSrc'
        # Exclude dependencies that are only resolved in test classpaths
        # dependency-graph-exclude-configurations: '.*[Tt]est(Compile|Runtime)Classpath'
  metrics:
    runs-on: self-hosted
    #    runs-on: [ubuntu-latest, windows-latest, macos-latest]
    permissions:
        contents: read

        steps:
        - uses: actions/checkout@v4
        - name: Set up JDK for Gradle
          uses: actions/setup-java@v4
          with:
            java-version: '17'
            distribution: 'temurin'

        # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
        # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
        - name: Configure and Setup GW
          uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
          with:
            gradle-version: '8.10.2'


        # Cache Gradle dependencies
        - name: Cache Gradle Dependencies
          uses: actions/cache@v3
          with:
            path: ~/.gradle/caches
            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: |
              ${{ runner.os }}-gradle-


